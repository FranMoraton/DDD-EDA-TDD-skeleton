security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Users\Infrastructure\Security\SecurityUser:
            algorithm: argon2id
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        security_user_provider:
            id: App\Users\Infrastructure\Security\SecurityUserProvider
    firewalls:
        login:
            pattern: ^/users/v1/login$
            stateless: true
            provider: security_user_provider
            json_login:
                check_path: /users/v1/login
                username_path: id
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/
            stateless: true
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { route: '^index$', roles: PUBLIC_ACCESS }
        - { route: users_login, roles: PUBLIC_ACCESS, methods: POST }
        - { route: users_create, roles: ROLE_ADMIN, methods: POST }
        - { route: users_by_id, roles: ROLE_ADMIN, methods: GET }
        - { route: users_delete, roles: ROLE_ADMIN, methods: DELETE }
        - { route: users_update, roles: ROLE_ADMIN, methods: PUT }
        ## Default
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
