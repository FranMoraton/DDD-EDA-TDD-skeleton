framework:
    messenger:
        default_bus: messenger_command.bus
        serializer:
            default_serializer: App\System\Infrastructure\Symfony\Bus\Serializer\CustomSerializer

        buses:
            messenger_command.bus:
                default_middleware: true
                middleware:
                    - App\System\Infrastructure\Symfony\Bus\Middleware\ForceSyncMiddleware
                    - App\System\Infrastructure\Symfony\Bus\Middleware\LoggerMiddleware
                    - App\System\Infrastructure\Symfony\Bus\Middleware\TransactionMiddleware
                    - App\System\Infrastructure\Symfony\Bus\Middleware\HandlerExceptionCatcherMiddleware
            messenger_query.bus:
                default_middleware: true
                middleware:
                    - App\System\Infrastructure\Symfony\Bus\Middleware\CacheQueryMiddleware
            publish_event.bus:
                default_middleware: allow_no_handlers
                middleware:
                    - App\System\Infrastructure\Symfony\Bus\Middleware\EventRecorderMiddleware
                    - App\System\Infrastructure\Symfony\Bus\Middleware\RoutingKeyMiddleware
            publish_command.bus:
                default_middleware: allow_no_handlers
                middleware:
                    - App\System\Infrastructure\Symfony\Bus\Middleware\RoutingKeyMiddleware
            messenger_event.bus:
                default_middleware: allow_no_handlers
                middleware:
                    - App\System\Infrastructure\Symfony\Bus\Middleware\ForceSyncMiddleware
                    - App\System\Infrastructure\Symfony\Bus\Middleware\SimpleMessagePublisherMiddleware
                    - App\System\Infrastructure\Symfony\Bus\Middleware\HandlerExceptionCatcherMiddleware

        # Uncomment this (and the failed transport below) to send failed messages to this transport for later handling.
        # failure_transport: failed

        transports:
            failed_commands:
                dsn: '%env(AMQP_DSN)%'
                options:
                    exchange:
                        name: failed_commands
                        type: topic
                    queues:
                        commands_dead:
                            binding_keys:
                                - commands

            commands:
                dsn: '%env(AMQP_DSN)%'
                failure_transport: failed_commands
                options:
                    exchange:
                        name: commands
                        type: fanout
                    delay:
                        queue_name_pattern: 'commands_%%delay%%'
                    queues:
                        commands:
                retry_strategy:
                    max_retries: 5
                    delay: 10000
                    multiplier: 6
                    max_delay: 1800000

            events:
                dsn: '%env(AMQP_DSN_EVENTS)%'
                options:
                    exchange:
                        name: events
                        type: topic
                    queues:
                        app_example_events:
                            binding_keys:
                                - company.app.#.domain_event.#
                            arguments:
                                x-dead-letter-exchange: app_example_events_dead
                retry_strategy:
                    max_retries: 0
            events_retry:
                dsn: '%env(AMQP_DSN_EVENTS)%'
                options:
                    exchange:
                        name: app_example_events
                        type: fanout
                    queues:
                        app_example_events:
                            arguments:
                                x-dead-letter-exchange: app_example_events_dead
            events_dead:
                dsn: '%env(AMQP_DSN_EVENTS)%'
                options:
                    exchange:
                        name: app_example_events_dead
                        type: fanout
                    queues:
                        app_example_events_dead:
                            arguments:
                                x-message-ttl: 180000
                                x-dead-letter-exchange: app_example_events

        routing:
            App\System\Domain\Event\DomainEvent: events
            App\System\Application\Command: commands

# when@test:
#    framework:
#        messenger:
#            transports:
#                # replace with your transport name here (e.g., my_transport: 'in-memory://')
#                # For more Messenger testing tools, see https://github.com/zenstruck/messenger-test
#                async: 'in-memory://'
